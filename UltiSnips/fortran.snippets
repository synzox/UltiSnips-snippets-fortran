snippet pro "program" b
program ${1:name}
	implicit none
	${2:! code}
end program ${1}
endsnippet

snippet mod "module" b
module ${1:name}
    implicit none
	${2:! code}
end module ${1}
endsnippet

snippet use "use module" b
use ${1:module}, only: ${2:symbols}	
endsnippet

snippet interface "interface" b
interface ${1:name}
	${2:! code}
end interface ${1}
endsnippet

snippet sub "subroutine" b
subroutine ${1:name}(${2:parameters})
    implicit none
	${3:! code}
end subroutine ${1}
endsnippet

snippet func "function" b
function ${1:name}(${2:parameters}) result(${3:parameter})
	${4:! code}
end function ${1}
endsnippet

snippet if "if"
if (${1:condition}) then
	${2:! code}
end if
endsnippet

snippet ifelse "if...else..."
if (${1:condition}) then
	${2:! code}
else
	${3:! code}
end if
endsnippet

snippet do "do"
do ${1:i} = ${2:1}, ${3:N}
	${4:! code}
end do
endsnippet

snippet dow "do while"
do while (${1:condition})
	${2:! code}
end do
endsnippet

snippet type "type"
type :: ${1:name}
    ${2:! code}
end type $1
endsnippet

snippet arr "array"
${1:type}, dimension(${2}) :: ${3}
endsnippet

snippet where "where"
where (${1:condition}) 
    ${2:code}
end where
endsnippet

snippet elsew "where...elsewhere..."
where (${1:condition})
	${2:! code}
elsewhere
	${3:! code}
end where
endsnippet

snippet const "constant"
${1:type}, parameter :: ${3} = ${4}
endsnippet

snippet i
integer :: ${1}
endsnippet

snippet r
	real :: ${1}
endsnippet


snippet ik
	integer(kind = ${1}) :: ${2}
endsnippet

snippet rk
	real(kind = ${1}) :: ${2}
endsnippet

snippet l
	logical :: ${1}
endsnippet

snippet c
	character :: ${1}
endsnippet

snippet s
	character(len=${1}) :: ${2}
endsnippet

snippet t
	type(${1}) :: ${2}
endsnippet

snippet var
	${1:type}(${2:kind})${3:, properties} :: ${4:varname}
endsnippet

snippet fvar
	${1:type}(${2:kind}), intent(${3:inout})${4:, properties} :: ${5:varname}
endsnippet

snippet open "open file"
open (unit=${1:10}, file=${2:filename}, ${3})
${4}
close(${1})
endsnippet

snippet write "write file"
write (${1:*}, ${2:*}) ${3:variable}
endsnippet

snippet read "read file"
read (${1:*}, ${2:*}) ${3:target}
endsnippet

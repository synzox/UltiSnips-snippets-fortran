snippet pro "program" b
program ${1:name}
	implicit none
	${2:! code}
end program $1
endsnippet

snippet mod "module" b
module ${1:name}
    implicit none
	${2:! code}
end module $1
endsnippet

snippet use "use module" b
use ${1:module}, only: ${2:symbols}	
endsnippet

snippet interf "interface" b
interface ${1:name}
	${2:! code}
end interface $1
endsnippet

snippet sub "subroutine" b
subroutine ${1:name}(${2:parameters})
    implicit none
	${3:! code}
end subroutine $1
endsnippet

snippet func "function" b
function ${1:name}(${2:parameters}) result(${3:parameter})
	${4:! code}
end function $1
endsnippet

snippet if "if"
if (${1:condition}) then
	${2:! code}
end if
endsnippet

snippet ife "if...else..."
if (${1:condition}) then
	${2:! code}
else
	${3:! code}
end if
endsnippet

snippet do "do"
do ${1:i} = ${2:1}, ${3:N}
	${4:! code}
end do
endsnippet

snippet dow "do while"
do while (${1:condition})
	${2:! code}
end do
endsnippet

snippet sc "select case"
select case (${1:parameter})
    case (${2:condition})
        ${3:! code}
    case default
        ${4:!code}
end select
endsnippet

snippet type "type"
type :: ${1:typename}
    ${2:! code}
end type $1
endsnippet

snippet t
type(${1:typername}) :: ${2:name}
endsnippet

snippet const "constant"
${1:datatype}, parameter :: ${3:name} = ${4:value}
endsnippet

snippet arr "array"
${1:datatype}, dimension(${2:size}) :: ${3:name}
endsnippet

snippet where "where"
where (${1:condition}) 
    ${2:! code}
end where
endsnippet

snippet elsew "where...elsewhere..."
where (${1:condition})
	${2:! code}
elsewhere
	${3:! code}
end where
endsnippet

snippet i "integer"
integer(kind = ${1:4}) :: ${2:name}
endsnippet

snippet r "real"
real(kind = ${1:8}) :: ${2:name}
endsnippet

snippet c "complex"
complex(kind = ${1:8}) :: ${2:name}
endsnippet

snippet ia "integer array"
integer(kind = ${1:4}), dimension(${2:size}) :: ${3:name}
endsnippet

snippet ra "real array"
real(kind = ${1:8}), dimension(${2:size}) :: ${3:name}
endsnippet

snippet ca "complex array"
complex(kind = ${1:8}), dimension(${2:size}) :: ${3:name}
endsnippet

snippet iaa "allocatable integer array"
integer(kind = ${1:4}), dimension(${2::}), allocatable :: ${3:name}
endsnippet

snippet raa "allocatable real array"
real(kind = ${1:8}), dimension(${2::}), allocatable :: ${3:name}
endsnippet

snippet caa "allocatable complex array"
complex(kind = ${1:8}), dimension(${2::}), allocatable :: ${3:name}
endsnippet

snippet l "logical"
logical :: ${1:name}
endsnippet

snippet ch "character"
character(len = ${1:size}) :: ${2:name}
endsnippet

snippet pi "integer parameter"
integer(kind = ${1:4}), intent(${2:inout}) :: ${3:name}
endsnippet

snippet pr "real parameter"
real(kind = ${1:8}), intent(${2:inout}) :: ${3:name}
endsnippet

snippet pc "complex parameter"
complex(kind = ${1:8}), intent(${2:inout}) :: ${3:name}
endsnippet

snippet pl "logical parameter"
logical, intent(${1:inout}) :: ${2:name}
endsnippet

snippet pch "character parameter"
character(len = ${1:size}), intent(${2:inout}) :: ${3:name}
endsnippet

snippet open "open file"
open (unit=${1:10}, file=${2:filename}, ${3})
${4:! code}
close($1)
endsnippet

snippet write "write file"
write (${1:*}, ${2:*}) ${3:variable}
endsnippet

snippet read "read file"
read (${1:*}, ${2:*}) ${3:target}
endsnippet
